@page "/assets"

@using SchullerCo.Collab.Dash.Models
@using SchullerCo.Collab.Dash.Models.CustomIcons
@using SchullerCo.Collab.Dash.SvgIcons
@using System.Threading.Tasks
@using System.Collections.Generic
@using SchullerCo.Collab.Dash.Services


@inject HttpClient Http

<PageTitle>Assets</PageTitle>

<MudContainer Class="mt-16 d-flex" MaxWidth="MaxWidth.False">
    <MudGrid>
        <MudSplitter OnDoubleClicked="@OnDoubleClicked"
                     @bind-Dimension="@_percentage">
            <StartContent>
                <div class="row" style="height:100%; width: 100%; padding: 16px; margin: 0;">
                    <div>
                        <MudText Typo="Typo.subtitle2">@currentPath</MudText>   
                        <br />
                    </div
                    <!-- Erste Zeile mit den Buttons -->
                    <div class="col-12">
                        <MudButton Variant="Variant.Filled" DisableElevation="true" StartIcon="@Icons.Material.Filled.ArrowBack" 
                        OnClick="@OnUpCLick" Color="Color.Primary">
                        GO BACK
                    </MudButton>
                        <MudButton Variant="Variant.Filled" Disabled="true" DisableElevation="true" 
                        StartIcon="@SvgIconHelper.GetSvgIcon(SvgLib.QrCode)" Color="Color.Primary">
                        QRCODE
                    </MudButton>
                    </div>
                    <!-- Zweite Zeile mit dem MudText -->
                    <div>
                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <MudText Color="Color.Error">@errorMessage</MudText>
                        }
                        else if (assetDtoExtension.AssetDtos != null && assetDtoExtension.AssetDtos.Any())
                        {
                            <MudTable Items=@assetDtoExtension.AssetDtos Hover="true" Striped="true"
                                      RowClass="cursor-pointer" T="AssetDto"
                                      OnRowClick="OnRowClick" Filter="new Func<AssetDto,bool>(FilterFunc1)">
                                <ToolBarContent>
                                    <MudSpacer />
                                    <div>
                                        <MudTextField @bind-Value="searchString" Placeholder="Search"
                                                      Variant="Variant.Outlined" Margin="Margin.Dense"
                                                      Adornment="Adornment.Start"
                                                      AdornmentIcon="@Icons.Material.Filled.Search"
                                                      IconSize="Size.Medium" Class="mt-0" 
                                                      Style="@($"background:{Colors.Grey.Lighten3};")">
                                        </MudTextField>
                                    </div>
                                </ToolBarContent>
                                <HeaderContent>
                                    <MudTh>
                                        <MudTableSortLabel SortBy="new Func<AssetDto, object>(x=>x.Id)">
                                            Id
                                        </MudTableSortLabel>
                                    </MudTh>
                                    <MudTh>
                                        <MudTableSortLabel InitialDirection="SortDirection.Ascending"
                                                           SortBy="new Func<AssetDto, object>(x=>x.Name)">
                                            Name
                                        </MudTableSortLabel>
                                    </MudTh>
                                    <MudTh>
                                        <MudTableSortLabel SortBy="new Func<AssetDto, object>(x=>x.Description)">
                                            Description
                                        </MudTableSortLabel>
                                    </MudTh>
                                </HeaderContent>

                                <RowTemplate>
                                    <MudTd DataLabel="Id">@context.Id
                                    </MudTd>
                                    <MudTd DataLabel="Name">@context.Name</MudTd>
                                    <MudTd DataLabel="Position">@context.Description</MudTd>
                                </RowTemplate>

                                <PagerContent>
                                    <MudTablePager />
                                </PagerContent>
                            </MudTable>
                        }
                        else
                        {
                            <MudText Color="Color.Dark">Keine Daten verfügbar</MudText>
                        }
                    </div>
                </div>
            </StartContent>

            <EndContent>
                <MudItem>
                    <!-- Second column for the menu with tabs -->
                    <MudTabs PanelClass="mt-6" Elevation="1" Rounded="true"
                             Class="my-6  mx-3" Color="Color.Default">
                        <MudTabPanel Icon="@SvgIconHelper.GetSvgIcon(SvgLib.ModelViewer)" Text="3D VIEWER">

                        </MudTabPanel>
                        <MudTabPanel Icon="@SvgIconHelper.GetSvgIcon(SvgLib.DataBase)" Text="DATA">
                            <MudTabs Rounded="true">

                                <MudTabPanel>
                                    <ChildContent>
                                        <MudText>Custom tab content only</MudText>
                                    </ChildContent>
                                    <TabWrapperContent>
                                        <MudTooltip Text="ToolTip Two">
                                            @context
                                        </MudTooltip>
                                    </TabWrapperContent>
                                    <TabContent>
                                        <MudText Typo="Typo.button">AVEVA DATA</MudText>
                                    </TabContent>
                                </MudTabPanel>

                                <MudTabPanel>
                                    <ChildContent>
                                        <MudText>Both custom tab and wrapper content</MudText>
                                    </ChildContent>
                                    <TabWrapperContent>
                                        <MudTooltip Text="ToolTip Two">
                                            @context
                                        </MudTooltip>
                                    </TabWrapperContent>
                                    <TabContent>
                                        <MudText Typo="Typo.button">SPECKLE DATA</MudText>
                                    </TabContent>

                                </MudTabPanel>
                            </MudTabs>
                        </MudTabPanel>

                        <MudTabPanel Icon="@SvgIconHelper.GetSvgIcon(SvgLib.Documents)" Text="DOCUMENTS">
                            <MudGrid Class="mt-2">
                                <MudItem xs="12" Class="d-flex justify-end">
                                    <MudFileUpload T="IBrowserFile" FilesChanged="UploadFiles">
                                        <ButtonTemplate>
                                            <MudButton HtmlTag="label"
                                                       Color="Color.Primary"
                                                       StartIcon="@Icons.Material.Filled.CloudUpload"
                                                       for="@context.Id">
                                                Upload Files
                                            </MudButton>
                                        </ButtonTemplate>
                                    </MudFileUpload>
                                </MudItem>
                            </MudGrid>
                        </MudTabPanel>

                        <MudTabPanel Icon="@SvgIconHelper.GetSvgIcon(SvgLib.Forms)" Text="FORMS">

                        </MudTabPanel>
                    </MudTabs>
                </MudItem>
            </EndContent>
        </MudSplitter>
    </MudGrid>
</MudContainer>


@code {

    double _percentage = 50;
    string errorMessage = string.Empty;
    // ICollection<AssetDto>? assetDtos = null;
    // AssetDto? assetDto = null;
    // bool hasChildren = false;
    private string searchString = "";

    private string currentPath = string.Empty;
    AssetDtoExtension assetDtoExtension = new AssetDtoExtension();

    protected override async Task OnInitializedAsync()
    {
       
        if (assetDtoExtension.AssetDtos != null)
        {
            assetDtoExtension.AssetDtos.Clear();
            assetDtoExtension.AssetDtoExts.Clear();
        }
        else
        {
            assetDtoExtension.AssetDtos = new List<AssetDto>();
            assetDtoExtension.AssetDtoExts = new List<AssetDtoExt>();
        }

        await GetAssetByIdAsync(1);
        await SetCurrentpath();
        assetDtoExtension.AssetDtos.Add(assetDtoExtension.AssetDto);
    }

    // protected async Task OnClickAsset(int id)
    // {
    //     await GetAssetChildren(id);
    // }

    public async Task OnRowClick(TableRowClickEventArgs<AssetDto> args)
    {

        await SetTableViewWithAssetChildren(args.Item.Id);
        assetDtoExtension.AssetDto = args.Item;
        StateHasChanged();

    }

    public async Task OnUpCLick(MouseEventArgs args)
    {
        await GetAssetParent();
        StateHasChanged();
    }

    private async Task SetCurrentpath()
    {
        try
        {
            if (assetDtoExtension.AssetDto != null)
            {

                AssetDto tempAssetDto = assetDtoExtension.AssetDtos.FirstOrDefault<AssetDto>();
                if (tempAssetDto != null)
                {
                    List<AssetDto> temp = new List<AssetDto>();
                    string tempCurrentPath = string.Empty;
                    if (await ApiClientService.GetParent(tempAssetDto.Id) != null)
                    {
                        do
                        {
                            tempAssetDto = await ApiClientService.GetParent(tempAssetDto.Id);
                            tempCurrentPath = tempAssetDto.Name + " | " + tempCurrentPath;

                        }
                        while (await ApiClientService.GetParent(tempAssetDto.Id) != null);
                    }

                    currentPath = tempCurrentPath;
                }

                StateHasChanged();
            }

        }
        catch (Exception ex)
        {
            errorMessage = $"Fehler beim Abrufen der Daten: {ex.Message}";
            if (ex.InnerException != null)
            {
                errorMessage += $" Inner Exception: {ex.InnerException.Message}";
            }
        }
    }

    private async Task GetAssets()
    {
        try
        {
            assetDtoExtension.AssetDtos = await ApiClientService.GetAssets();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            errorMessage = $"Fehler beim Abrufen der Daten: {ex.Message}";
            if (ex.InnerException != null)
            {
                errorMessage += $" Inner Exception: {ex.InnerException.Message}";
            }
        }
    }

    // private async Task GetAssetChildren(int id)
    // {
    //     try
    //     {
    //         List<AssetDto> result = (List<AssetDto>)await ApiClientService.GetChildren(id);
    //         if (result != null && result.Count != 0)
    //         {
    //             assetDtos = await ApiClientService.GetChildren(id);
    //             StateHasChanged();
    //         }

    //     }
    //     catch (Exception ex)
    //     {
    //         errorMessage = $"Fehler beim Abrufen der Daten: {ex.Message}";
    //         if (ex.InnerException != null)
    //         {
    //             errorMessage += $" Inner Exception: {ex.InnerException.Message}";
    //         }
    //     }
    // }

    private async Task GetAssetParent()
     {
        try
        {
            if (assetDtoExtension.AssetDto.ParentId != null)
            {
                int parentId = (int)assetDtoExtension.AssetDto.ParentId;
                assetDtoExtension.AssetDto = await ApiClientService.GetAsset(parentId);
                await SetTableViewWithAssetChildren(parentId);
                StateHasChanged();
            }
            else
            {
                this.assetDtoExtension.AssetDtos.Clear();
                this.assetDtoExtension.AssetDtos.Add(assetDtoExtension.AssetDto);
                await SetCurrentpath();
                StateHasChanged();
            }

        }
        catch (Exception ex)
        {
            errorMessage = $"Fehler beim Abrufen der Daten: {ex.Message}";
            if (ex.InnerException != null)
            {
                errorMessage += $" Inner Exception: {ex.InnerException.Message}";
            }
        }
    }

    private async Task GetAssetByIdAsync(int id)
    {
        try
        {
            assetDtoExtension.AssetDto = await ApiClientService.GetAsset(id);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            errorMessage = $"Fehler beim Abrufen der Daten: {ex.Message}";
            if (ex.InnerException != null)
            {
                errorMessage += $" Inner Exception: {ex.InnerException.Message}";
            }
        }
    }

    private async Task SetTableViewWithAssetChildren(int id)
    {
        try
        {
            List<AssetDto> result = (List<AssetDto>)await ApiClientService.GetChildren(id);
            if (result != null && result.Count != 0)
            {
                assetDtoExtension.AssetDto = await ApiClientService.GetAsset(id);
                assetDtoExtension.AssetDtos = await ApiClientService.GetChildren(id);
                await SetCurrentpath();
                StateHasChanged();
            }

        }
        catch (Exception ex)
        {
            errorMessage = $"Fehler beim Abrufen der Daten: {ex.Message}";
            if (ex.InnerException != null)
            {
                errorMessage += $" Inner Exception: {ex.InnerException.Message}";
            }
        }
    }

    
    // private async Task<bool> HasChildrenAsync(int id)
    // {
    //     List<AssetDto> result = (List<AssetDto>)await ApiClientService.GetChildren(id);
    //     return result != null && result.Count != 0;
    // }


   private async Task HasChildren(int id)
    {
        List<AssetDto> result = (List<AssetDto>)await ApiClientService.GetChildren(id);
        if (result != null && result.Count != 0)
        {
            AssetDtoExt temp = assetDtoExtension.AssetDtoExts.Where<AssetDtoExt>(ae => ae.Id == id).FirstOrDefault();
            if(temp != null)
            {
                temp.HasChildren = true;
            }

        }
        else
        {
            AssetDtoExt temp = assetDtoExtension.AssetDtoExts.Where<AssetDtoExt>(ae => ae.Id == id).FirstOrDefault();
            temp.HasChildren = false;
        }
    }

    private Task OnDoubleClicked()
    {
        if (true)
        {
            _percentage = 50;
        }

        return Task.CompletedTask;
    }

    private bool FilterFunc1(AssetDto AssetDto) => FilterFunc(AssetDto, searchString);

    private bool FilterFunc(AssetDto AssetDto, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (AssetDto.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (AssetDto.Description.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (AssetDto.Id.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }


    IList<IBrowserFile> files = new List<IBrowserFile>();
    private void UploadFiles(IBrowserFile file)
    {
        files.Add(file);
        //TODO upload the files to the server
    }
}

<style>
    .mud-tabs .mud-tab.mud-tab-active {
        color: #295093 !important; /* Textfarbe des aktiven Tabs */
        background-color: rgba(128, 128, 128, 0.2) !important; /* Hintergrundfarbe des aktiven Tabs */
    }

    .mud-tabs .mud-tab:hover {
        color: #295093 !important; /* Textfarbe des Tabs beim Hover */
        background-color: rgba(128, 128, 128, 0.2) /* Hintergrundfarbe des Tabs beim Hover */
    }

    .row {
        display: flex;
        flex-direction: row;
        align-items: center;
    }

    .mt-4 {
        margin-top: 1.5rem; /* 24px, kannst du je nach Bedarf anpassen */
    }
</style>

