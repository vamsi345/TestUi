@page "/assets"

@using SchullerCo.Collab.Dash.Models
@using SchullerCo.Collab.Dash.Models.CustomIcons
@using SchullerCo.Collab.Dash.SvgIcons
@using System.Threading.Tasks
@using System.Collections.Generic
@using SchullerCo.Collab.Dash.Services
@using SchullerCo.Collab.Dash.Models.Asset

@inject HttpClient Http

<PageTitle>Assets</PageTitle>

<MudContainer Class="mt-16 d-flex" MaxWidth="MaxWidth.ExtraExtraLarge">
    <MudGrid Class="d-flex justify-start">

        <MudItem xs="12">
            <MudText Typo="Typo.h4" GutterBottom="true">Assets</MudText>
            <MudSpacer />
            <MudPaper Elevation="0" Style="@($"color:{Colors.Grey.Darken1}; height: 40px; width: 100%; padding: 0px; display: flex; align-items: center;")"
                      Class="d-flex align-center">
                <MudText Typo="Typo.subtitle2" Class="d-flex align-items-center">
                    <div class="d-flex">
                        @foreach (var segment in GetPathSegments())
                        {
                            <button type="button" style="--bs-btn-padding-y: .25rem; --bs-btn-padding-x: .5rem; --bs-btn-font-size: .75rem;"
                                    class="btn btn-outline-primary btn-sm" @onclick="() => OnPathSegmentClick(segment)">
                                @segment
                            </button>
                            @* <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="() => OnPathSegmentClick(segment)">
                        @segment
                        </MudButton> *@
                            @if (segment != GetPathSegments().Last())
                            {
                                <MudText Typo="Typo.h6">-</MudText>
                            }
                        }
                    </div>
                </MudText>

            </MudPaper>
            @*   <MudPaper Class="d-flex flex-row flex-grow-1 gap-2" Elevation="0">
            <MudItem>
            <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.ArrowBack"
            OnClick="@OnUpCLick" Color="Color.Primary"
            Disabled="true">
            BACK
            </MudButton>
            </MudItem>
            <MudItem>
            <MudButton Variant="Variant.Filled" Disabled="true"
            StartIcon="@SvgIconHelper.GetSvgIcon(SvgLib.QrCode)" Color="Color.Primary">
            QRCODE
            </MudButton>
            </MudItem>
            </MudPaper> *@
        </MudItem>

        <MudSplitter ContentStyle="height: 100%;" OnDoubleClicked="@OnDoubleClicked" @bind-Dimension="@_percentage">
            <StartContent>
                <MudPaper Elevation="0" Style="overflow-inline: auto; height: 100%; width: 100%; padding: 0px; margin: 5px;">

                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <MudText Color="Color.Error">@errorMessage</MudText>
                    }
                    else if (assets != null && assets.Any())
                    {
                        <MudTable RowsPerPage="100" Items=@rootAssets.Select(a=>a.Asset) Hover="true" Striped="true"
                                  RowClass="cursor-pointer" T="AssetDto"
                                  Filter="new Func<AssetDto,bool>(FilterFunc1)">
                            @*  OnRowClick="OnRowClick" *@
                            <ToolBarContent>
                                <MudSpacer />
                                <div>

                                  @*   <form class="d-flex" role="search">
                                        <input class="form-control me-2" type="search" placeholder="Search" aria-label="Search">
                                        <input class="form-control me-2" type="search" placeholder="Search" aria-label="Search">
                                        <button class="btn btn-outline-success" type="submit">Search</button>
                                    </form> *@

                                    <MudTextField @bind-Value="searchString" Placeholder="Search"
                                                  Variant="Variant.Outlined" Margin="Margin.Dense"
                                                  Adornment="Adornment.Start"
                                                  AdornmentIcon="@Icons.Material.Filled.Search"
                                                  IconSize="Size.Medium" Class="mt-0"
                                                  Style="@($"background:{Colors.Grey.Lighten3};")">
                                    </MudTextField>
                                </div>
                            </ToolBarContent>

                            <HeaderContent>
                                <MudTh>
                                    @*  <MudTableSortLabel SortBy="new Func<AssetDto, object>(x=>x.Id)">
                                Id
                                </MudTableSortLabel> *@
                                </MudTh>
                                <MudTh>
                                    <MudTableSortLabel InitialDirection="SortDirection.Ascending"
                                                       SortBy="new Func<AssetDto, object>(x=>x.Name)">
                                        Name
                                    </MudTableSortLabel>
                                </MudTh>
                                <MudTh>
                                    <MudTableSortLabel SortBy="new Func<AssetDto, object>(x=>x.Description)">
                                        Description
                                    </MudTableSortLabel>
                                </MudTh>
                            </HeaderContent>

                            <RowTemplate>
                                @if (@HasChildren(rootAssets.Where(a => a.Asset.Id == context.Id).SingleOrDefault()))
                                {
                                    <MudTd DataLabel="Id">
                                        @*<MudButton StartIcon="@SvgIconHelper.GetSvgIcon(SvgLib.Members)" Variant="Variant.Filled" OnClick="() => OnButtonClick(context)">Children</MudButton> *@
                                        <button type="button" class="btn btn-primary btn-sm" @onclick="() => OnButtonClick(context)">Open</button>
                                    </MudTd>
                                }
                                else
                                {
                                    <MudTd DataLabel="Id">

                                    </MudTd>
                                }
                                <MudTd DataLabel="Name">@context.Name</MudTd>
                                <MudTd DataLabel="Position">@context.Description</MudTd>
                            </RowTemplate>

                            <PagerContent>
                                <MudTablePager />
                            </PagerContent>
                        </MudTable>
                    }
                    else
                    {
                        <MudText Color="Color.Dark">Keine Daten verfügbar</MudText>
                    }
                </MudPaper>
            </StartContent>

            <EndContent>
                <MudPaper Elevation="0" Style="padding: 0px; margin: 5px;">

                    <MudTabs PanelClass="mt-3" Elevation="1" Rounded="true"
                             Color="Color.Default">
                        <MudTabPanel Icon="@SvgIconHelper.GetSvgIcon(SvgLib.ModelViewer)" Text="3D VIEWER">

                        </MudTabPanel>

                        <MudTabPanel Icon="@SvgIconHelper.GetSvgIcon(SvgLib.DataBase)" Text="DATA">
                            <MudTabs Rounded="true">
                                <MudTabPanel Style="" Icon="@SvgIconHelper.GetSvgIcon(SvgLib.Aveva)" Text="AVEVA">
                                    <ChildContent>
                                        <MudText>Custom tab content only</MudText>
                                    </ChildContent>
                                    <TabWrapperContent>
                                        <MudTooltip Text="ToolTip Two">
                                            @context
                                        </MudTooltip>
                                    </TabWrapperContent>

                                </MudTabPanel>

                                <MudTabPanel Icon="@SvgIconHelper.GetSvgIcon(SvgLib.Bim)" Text="BIM">
                                    <ChildContent>
                                        <MudText>Both custom tab and wrapper content</MudText>
                                    </ChildContent>
                                    <TabWrapperContent>
                                        <MudTooltip Text="ToolTip Two">
                                            @context
                                        </MudTooltip>
                                    </TabWrapperContent>
                                </MudTabPanel>
                            </MudTabs>
                        </MudTabPanel>

                        <MudTabPanel Icon="@SvgIconHelper.GetSvgIcon(SvgLib.Documents)" Text="DOCUMENTS">
                            <MudGrid Class="mt-2">
                                <MudItem xs="12" Class="d-flex justify-end">

                                    <MudFileUpload T="IBrowserFile" FilesChanged="UploadFiles">
                                        <ButtonTemplate>
                                            <MudButton HtmlTag="label"
                                                       Color="Color.Primary"
                                                       StartIcon="@Icons.Material.Filled.CloudUpload"
                                                       for="@context.Id">
                                                Upload Files
                                            </MudButton>
                                        </ButtonTemplate>
                                    </MudFileUpload>

                                </MudItem>
                            </MudGrid>
                        </MudTabPanel>

                        <MudTabPanel Icon="@SvgIconHelper.GetSvgIcon(SvgLib.Forms)" Text="FORMS">

                        </MudTabPanel>

                    </MudTabs>
                </MudPaper>
            </EndContent>
        </MudSplitter>
    </MudGrid>
</MudContainer>


@code {

    double _percentage = 50;
    string errorMessage = string.Empty;
    private string searchString = "";

    private string currentPath = string.Empty;
    AssetDtoExtension assetDtoExtension = new AssetDtoExtension();

    string searchQuery;
    IList<IBrowserFile> files = new List<IBrowserFile>();
    private ICollection<AssetDto> assets = new List<AssetDto>();
    private List<AssetViewModel> rootAssets = new List<AssetViewModel>();
    private AssetViewModel selectedAsset;
    private List<AssetViewModel> currentPathList = new List<AssetViewModel>();
    Client apiClient;


    protected override async Task OnInitializedAsync()
    {
        apiClient = ApiClientService.ApiClient();
        await LoadAssets();
    }

    private async Task LoadAssets()
    {
        try
        {
            assets = await apiClient.AssetsAllAsync();
            var assetViewModels = assets.Select(a => new AssetViewModel { Asset = a }).ToList();
            rootAssets = assetViewModels.Where(a => !a.Asset.ParentId.HasValue).ToList();
            foreach (var rootAsset in rootAssets)
            {
                SetChildren(rootAsset, assetViewModels);
            }
            StateHasChanged();
        }
        catch (Exception ex)
        {

            errorMessage = ex.Message;

        }

    }

    public bool HasChildren(AssetViewModel assetViewModel)
    {
        if (assetViewModel != null && assetViewModel.Children.Count > 0) return true;
        return false;
    }

    private void SetChildren(AssetViewModel parent, List<AssetViewModel> allAssets)
    {
        parent.Children = allAssets.Where(a => a.Asset.ParentId == parent.Asset.Id).ToList();
        foreach (var child in parent.Children)
        {
            SetChildren(child, allAssets);
        }
    }

    private void SelectAsset(AssetViewModel asset)
    {
        selectedAsset = asset;
        StateHasChanged();
    }

    private Task OnDoubleClicked()
    {
        _percentage = 50;
        return Task.CompletedTask;
    }

    private void UploadFiles(IBrowserFile file)
    {
        files.Add(file);
        //TODO upload the files to the server
    }

    private async Task OnButtonClick(AssetDto asset)
    {
        var args = new TableRowClickEventArgs<AssetDto> { Item = asset };
        await OnRowClick(args);
    }

    public async Task OnRowClick(TableRowClickEventArgs<AssetDto> args)
    {
        //var tempassets = assets.Where(a => a.ParentId == args.Item.Id).ToList();
        //var assetViewModels = new List<AssetViewModel>();
        //assetViewModels.AddRange(tempassets.Select(a => new AssetViewModel() { Asset = a }));



        if (rootAssets.Where(a => a.Asset.Id == args.Item.Id).FirstOrDefault().Children.Count > 0)
        {
            var assetViewModels = assets.Select(a => new AssetViewModel { Asset = a }).ToList();

            if (assetViewModels.Count != 0)
            {
                rootAssets = assetViewModels.Where(a => a.Asset.ParentId == args.Item.Id).ToList();
                foreach (var rootAsset in rootAssets)
                {
                    SetChildren(rootAsset, assetViewModels);
                }
            }
            await SetCurrentPath();
            StateHasChanged();
        }

    }

    public async Task OnUpCLick(MouseEventArgs args)
    {
        await GetAssetParent();
        await SetCurrentPath();
        StateHasChanged();
    }

    private async Task GetAssetParent()
    {
        try
        {
            var parentId = rootAssets.FirstOrDefault()?.Asset.ParentId;


            var assetViewModels = assets.Select(a => new AssetViewModel { Asset = a }).ToList();
            var parent = assetViewModels.Where(a => a.Asset.Id == parentId).FirstOrDefault();

            if (parent != null)
            {
                var grandParentId = parent.Asset.ParentId;

                if (parentId != null)
                {
                    var tempRootAssets = assetViewModels.Where(a => a.Asset.ParentId == grandParentId).ToList();

                    foreach (var elem in tempRootAssets)
                    {
                        SetChildren(elem, tempRootAssets);
                    }

                    if (tempRootAssets.Count > 0)
                    {
                        rootAssets = assetViewModels.Where(a => a.Asset.ParentId == grandParentId).ToList();
                        foreach (var rootAsset in rootAssets)
                        {
                            SetChildren(rootAsset, assetViewModels);
                        }
                    }
                }
            }

        }
        catch (Exception ex)
        {
            errorMessage = $"Fehler beim Abrufen der Daten: {ex.Message}";
            if (ex.InnerException != null)
            {
                errorMessage += $" Inner Exception: {ex.InnerException.Message}";
            }
        }
    }


    private bool FilterFunc1(AssetDto AssetDto) => FilterFunc(AssetDto, searchString);

    private bool FilterFunc(AssetDto AssetDto, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (AssetDto.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (AssetDto.Description.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (AssetDto.Id.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }


    //--------------New Cyril-------------//

    private List<string> GetPathSegments()
    {
        return currentPath.Split(new[] { " / " }, StringSplitOptions.RemoveEmptyEntries).ToList();
    }

    private async Task OnPathSegmentClick(string segment)
    {
        var segments = GetPathSegments();
        var segmentIndex = segments.IndexOf(segment);
        if (segmentIndex >= 0)
        {
            await NavigateToPathSegment(segmentIndex);
        }
    }

    private async Task NavigateToPathSegment(int segmentIndex)
    {
        var segments = GetPathSegments();
        string targetPath = string.Join(" / ", segments.Take(segmentIndex + 1));

        var asset = assets.FirstOrDefault(a => a.Name == segments[segmentIndex]);
        if (asset != null)
        {
            GetAssetParent();

            await SetCurrentPath();
            StateHasChanged();
        }
    }

    private async Task SetCurrentPath()
    {
        try
        {
            if (rootAssets.Count > 0)
            {
                if (rootAssets.FirstOrDefault().Asset.ParentId != null)
                {
                    string tempCurrentPath = string.Empty;
                    AssetDto tempAssetDto = rootAssets.FirstOrDefault().GetParentAsset(assets, rootAssets.FirstOrDefault().Asset);
                    if (tempAssetDto != null)
                    {
                        do
                        {
                            tempCurrentPath = tempAssetDto.Name + " / " + tempCurrentPath;
                            tempAssetDto = rootAssets.FirstOrDefault().GetParentAsset(assets, tempAssetDto);
                        }
                        while (tempAssetDto != null);

                        currentPath = tempCurrentPath.TrimEnd(" / ".ToCharArray());
                    }
                }
                else currentPath = "";
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Fehler beim Abrufen der Daten: {ex.Message}";
            if (ex.InnerException != null)
            {
                errorMessage += $" Inner Exception: {ex.InnerException.Message}";
            }
        }
    }
}

<style>
    .mud-tabs .mud-tab.mud-tab-active {
        color: #295093 !important; /* Textfarbe des aktiven Tabs */
        background-color: rgba(128, 128, 128, 0.2) !important; /* Hintergrundfarbe des aktiven Tabs */
    }

    .mud-tabs .mud-tab:hover {
        color: #295093 !important; /* Textfarbe des Tabs beim Hover */
        background-color: rgba(128, 128, 128, 0.2) /* Hintergrundfarbe des Tabs beim Hover */
    }

    .row {
        display: flex;
        flex-direction: row;
        align-items: center;
    }

    .mt-4 {
        margin-top: 1.5rem; /* 24px, kannst du je nach Bedarf anpassen */
    }
</style>

@* <div class="row" style="height:100%; width: 100%; padding: 10px; margin: 0;"><div> *@