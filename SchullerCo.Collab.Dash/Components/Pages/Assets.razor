@page "/assets"

@using SchullerCo.Collab.Dash.Models
@using SchullerCo.Collab.Dash.Models.CustomIcons
@using SchullerCo.Collab.Dash.SvgIcons
@using System.Threading.Tasks
@using System.Collections.Generic
@using SchullerCo.Collab.Dash.Services
@using SchullerCo.Collab.Dash.Models.Asset


@inject HttpClient Http

<PageTitle>Assets</PageTitle>

<MudContainer Class="mt-16 d-flex" MaxWidth="MaxWidth.False">
    <MudGrid Class="d-flex justify-start">

        <MudItem Class="" xs="12">
            <MudText Typo="Typo.h4" GutterBottom="true">Assets</MudText>
            <MudText Typo="Typo.subtitle2">@currentPath</MudText>
            </MudItem>
            <MudSplitter OnDoubleClicked="@OnDoubleClicked"
                         @bind-Dimension="@_percentage">
                <StartContent>
                    <MudPaper Elevation="0" Class="pa" Style="width: 100%; padding: 0px; margin: 5px;">

                        @* <div class="row" style="height:100%; width: 100%; padding: 10px; margin: 0;"><div> *@

                        @* <MudText Typo="Typo.subtitle2">@currentPath</MudText> *@

                        <!-- Erste Zeile mit den Buttons -->
                        <MudGrid>
                            <MudItem>
                                <MudButton Variant="Variant.Filled" DisableElevation="true" StartIcon="@Icons.Material.Filled.ArrowBack"
                                           OnClick="@OnUpCLick" Color="Color.Primary">
                                    GO BACK
                                </MudButton>
                                <MudButton Variant="Variant.Filled" Disabled="true" DisableElevation="true"
                                           StartIcon="@SvgIconHelper.GetSvgIcon(SvgLib.QrCode)" Color="Color.Primary">
                                    QRCODE
                                </MudButton>
                            </MudItem>
                        </MudGrid>

                        <!-- Zweite Zeile mit dem MudText -->
                        @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <MudText Color="Color.Error">@errorMessage</MudText>
                    }
                    else if (assets != null && assets.Any())
                    { 
                        <MudTable Items=@rootAssets.Select(a=>a.Asset) Hover="true" Striped="true"
                                  RowClass="cursor-pointer" T="AssetDto"
                                  OnRowClick="OnRowClick" Filter="new Func<AssetDto,bool>(FilterFunc1)">
                            <ToolBarContent>
                                <MudSpacer />
                                <div>
                                    <MudTextField @bind-Value="searchString" Placeholder="Search"
                                                  Variant="Variant.Outlined" Margin="Margin.Dense"
                                                  Adornment="Adornment.Start"
                                                  AdornmentIcon="@Icons.Material.Filled.Search"
                                                  IconSize="Size.Medium" Class="mt-0"
                                                  Style="@($"background:{Colors.Grey.Lighten3};")">
                                    </MudTextField>
                                </div>
                            </ToolBarContent>
                            <HeaderContent>
                                <MudTh>
                                    <MudTableSortLabel SortBy="new Func<AssetDto, object>(x=>x.Id)">
                                        Id
                                    </MudTableSortLabel>
                                </MudTh>
                                <MudTh>
                                    <MudTableSortLabel InitialDirection="SortDirection.Ascending"
                                                       SortBy="new Func<AssetDto, object>(x=>x.Name)">
                                        Name
                                    </MudTableSortLabel>
                                </MudTh>
                                <MudTh>
                                    <MudTableSortLabel SortBy="new Func<AssetDto, object>(x=>x.Description)">
                                        Description
                                    </MudTableSortLabel>
                                </MudTh>
                            </HeaderContent>

                            <RowTemplate>
                                @if (@HasChildren(rootAssets.Where(a => a.Asset.Id == context.Id).SingleOrDefault()))
                                {
                                    <MudTd DataLabel="Id">
                                        Children
                                    </MudTd>
                                }
                                else
                                {
                                    <MudTd DataLabel="Id">
                                        No Children
                                    </MudTd>
                                }
                                    <MudTd DataLabel="Name">@context.Name</MudTd>
                                    <MudTd DataLabel="Position">@context.Description</MudTd>
                                </RowTemplate>

                                <PagerContent>
                                    <MudTablePager />
                                </PagerContent>
                            </MudTable>
                    }
                    else
                    {
                        <MudText Color="Color.Dark">Keine Daten verfügbar</MudText>
                    }
                </MudPaper>

            </StartContent>

            <EndContent>
                <MudItem>
                    <!-- Second column for the menu with tabs -->
                    <MudTabs PanelClass="mt-6" Elevation="1" Rounded="true"
                             Class="my-6  mx-3" Color="Color.Default">
                        <MudTabPanel Icon="@SvgIconHelper.GetSvgIcon(SvgLib.ModelViewer)" Text="3D VIEWER">

                        </MudTabPanel>
                        <MudTabPanel Icon="@SvgIconHelper.GetSvgIcon(SvgLib.DataBase)" Text="DATA">
                            <MudTabs Rounded="true">

                                <MudTabPanel>
                                    <ChildContent>
                                        <MudText>Custom tab content only</MudText>
                                    </ChildContent>
                                    <TabWrapperContent>
                                        <MudTooltip Text="ToolTip Two">
                                            @context
                                        </MudTooltip>
                                    </TabWrapperContent>
                                    <TabContent>
                                        <MudText Typo="Typo.button">AVEVA DATA</MudText>
                                    </TabContent>
                                </MudTabPanel>

                                <MudTabPanel>
                                    <ChildContent>
                                        <MudText>Both custom tab and wrapper content</MudText>
                                    </ChildContent>
                                    <TabWrapperContent>
                                        <MudTooltip Text="ToolTip Two">
                                            @context
                                        </MudTooltip>
                                    </TabWrapperContent>
                                    <TabContent>
                                        <MudText Typo="Typo.button">SPECKLE DATA</MudText>
                                    </TabContent>

                                </MudTabPanel>
                            </MudTabs>
                        </MudTabPanel>

                        <MudTabPanel Icon="@SvgIconHelper.GetSvgIcon(SvgLib.Documents)" Text="DOCUMENTS">
                            <MudGrid Class="mt-2">
                                <MudItem xs="12" Class="d-flex justify-end">
                                    <MudFileUpload T="IBrowserFile" FilesChanged="UploadFiles">
                                        <ButtonTemplate>
                                            <MudButton HtmlTag="label"
                                                       Color="Color.Primary"
                                                       StartIcon="@Icons.Material.Filled.CloudUpload"
                                                       for="@context.Id">
                                                Upload Files
                                            </MudButton>
                                        </ButtonTemplate>
                                    </MudFileUpload>
                                </MudItem>
                            </MudGrid>
                        </MudTabPanel>

                        <MudTabPanel Icon="@SvgIconHelper.GetSvgIcon(SvgLib.Forms)" Text="FORMS">

                        </MudTabPanel>
                    </MudTabs>
                </MudItem>
            </EndContent>
        </MudSplitter>
    </MudGrid>
</MudContainer>


@code {

    double _percentage = 50;
    string errorMessage = string.Empty;
    private string searchString = "";

    private string currentPath = string.Empty;
    AssetDtoExtension assetDtoExtension = new AssetDtoExtension();



    string searchQuery;
    IList<IBrowserFile> files = new List<IBrowserFile>();
    private ICollection<AssetDto> assets = new List<AssetDto>();
    private List<AssetViewModel> rootAssets = new List<AssetViewModel>();
    private AssetViewModel selectedAsset;
    private List<AssetViewModel> currentPathList = new List<AssetViewModel>();
    Client apiClient ;


    protected override async Task OnInitializedAsync()
    {
        apiClient = ApiClientService.ApiClient();
        await LoadAssets();
    }

    private async Task LoadAssets()
    {
        try
        {
            assets = await apiClient.AssetsAllAsync();
            var assetViewModels = assets.Select(a => new AssetViewModel { Asset = a }).ToList();
            rootAssets = assetViewModels.Where(a => !a.Asset.ParentId.HasValue).ToList();
            foreach (var rootAsset in rootAssets)
            {
                SetChildren(rootAsset, assetViewModels);
            }
            StateHasChanged();
        }
        catch (Exception ex)
        {

            errorMessage = ex.Message;

        }

    }

    public bool HasChildren(AssetViewModel  assetViewModel)
    {
        if (assetViewModel != null && assetViewModel.Children.Count > 0) return true;
        return false;
    }

    private void SetChildren(AssetViewModel parent, List<AssetViewModel> allAssets)
    {
        parent.Children = allAssets.Where(a => a.Asset.ParentId == parent.Asset.Id).ToList();
        foreach (var child in parent.Children)
        {
            SetChildren(child, allAssets);
        }
    }

    private void SelectAsset(AssetViewModel asset)
    {
        selectedAsset = asset;
        StateHasChanged();
    }

    private Task OnDoubleClicked()
    {
        _percentage = 50;
        return Task.CompletedTask;
    }

    private void UploadFiles(IBrowserFile file)
    {
        files.Add(file);
        //TODO upload the files to the server
    }

    public async Task OnRowClick(TableRowClickEventArgs<AssetDto> args)
    {
        //var tempassets = assets.Where(a => a.ParentId == args.Item.Id).ToList();
        //var assetViewModels = new List<AssetViewModel>();
        //assetViewModels.AddRange(tempassets.Select(a => new AssetViewModel() { Asset = a }));



        if (rootAssets.Where(a=>a.Asset.Id == args.Item.Id).FirstOrDefault().Children.Count>0)
        {
            var assetViewModels = assets.Select(a => new AssetViewModel { Asset = a }).ToList();

            if (assetViewModels.Count != 0)
            {
                rootAssets = assetViewModels.Where(a => a.Asset.ParentId == args.Item.Id).ToList();
                foreach (var rootAsset in rootAssets)
                {
                    SetChildren(rootAsset, assetViewModels);
                }
            }
            await SetCurrentPath();
            StateHasChanged();
        }

    }

    public async Task OnUpCLick(MouseEventArgs args)
    {
        await GetAssetParent();
        await SetCurrentPath();
        StateHasChanged();
    }

    private async Task SetCurrentPath()
    {
        try
        {

            if(rootAssets.Count > 0)
            {
                if (rootAssets.FirstOrDefault().Asset.ParentId != null)
                {
                    string tempCurrentPath = string.Empty;
                    AssetDto tempAssetDto = rootAssets.FirstOrDefault().GetParentAsset(assets, rootAssets.FirstOrDefault().Asset);
                    if (tempAssetDto != null)
                    {
                        do
                        {
                            tempCurrentPath = tempAssetDto.Name + " | " + tempCurrentPath;
                            tempAssetDto = rootAssets.FirstOrDefault().GetParentAsset(assets, tempAssetDto);
                        }
                        while (tempAssetDto != null);

                        currentPath = tempCurrentPath;
                    }

                }
                else currentPath = "";
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Fehler beim Abrufen der Daten: {ex.Message}";
            if (ex.InnerException != null)
            {
                errorMessage += $" Inner Exception: {ex.InnerException.Message}";
            }
        }
    }





    private async Task GetAssets()
    {
        try
        {
            assetDtoExtension.AssetDtos = await ApiClientService.GetAssets();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            errorMessage = $"Fehler beim Abrufen der Daten: {ex.Message}";
            if (ex.InnerException != null)
            {
                errorMessage += $" Inner Exception: {ex.InnerException.Message}";
            }
        }
    }

    private async Task GetAssetParent()
    {
        try
        {
            var parentId = rootAssets.FirstOrDefault()?.Asset.ParentId;
            

            var assetViewModels = assets.Select(a => new AssetViewModel { Asset = a }).ToList();
            var parent = assetViewModels.Where(a => a.Asset.Id == parentId).FirstOrDefault();

            if (parent != null) 
            {
                var grandParentId = parent.Asset.ParentId;

                if (parentId != null)
                {
                    var tempRootAssets = assetViewModels.Where(a => a.Asset.ParentId == grandParentId).ToList();

                    foreach (var elem in tempRootAssets)
                    {
                        SetChildren(elem, tempRootAssets);
                    }

                    if (tempRootAssets.Count > 0)
                    {
                        rootAssets = assetViewModels.Where(a => a.Asset.ParentId == grandParentId).ToList();
                        foreach (var rootAsset in rootAssets)
                        {
                            SetChildren(rootAsset, assetViewModels);
                        }
                    }
                }
            }

        }
        catch (Exception ex)
        {
            errorMessage = $"Fehler beim Abrufen der Daten: {ex.Message}";
            if (ex.InnerException != null)
            {
                errorMessage += $" Inner Exception: {ex.InnerException.Message}";
            }
        }
    }

    private async Task GetAssetParent1()
    {
        try
        {
            var parentId = rootAssets.FirstOrDefault()?.Asset.ParentId;
            var parent = assets.Where(a => a.Id == parentId);
            if (parent.Count() > 0)
            {
                var grandParentId = parent.FirstOrDefault<AssetDto>().ParentId;

                if (parentId != null)
                {
                    var tempassets = assets.Where(a => a.ParentId == grandParentId).ToList();
                    var assetViewModels = tempassets.Select(a => new AssetViewModel() { Asset = a }).ToList();



                    if (assetViewModels.Count != 0)
                    {
                        rootAssets = assetViewModels;
                        foreach (var rootAsset in assetViewModels)
                        {
                            SetChildren(rootAsset, assetViewModels);
                        }
                    }
                }
            }

        }
        catch (Exception ex)
        {
            errorMessage = $"Fehler beim Abrufen der Daten: {ex.Message}";
            if (ex.InnerException != null)
            {
                errorMessage += $" Inner Exception: {ex.InnerException.Message}";
            }
        }
    }



    private bool FilterFunc1(AssetDto AssetDto) => FilterFunc(AssetDto, searchString);

    private bool FilterFunc(AssetDto AssetDto, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (AssetDto.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (AssetDto.Description.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (AssetDto.Id.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
}


<style>
    .mud-tabs .mud-tab.mud-tab-active {
        color: #295093 !important; /* Textfarbe des aktiven Tabs */
        background-color: rgba(128, 128, 128, 0.2) !important; /* Hintergrundfarbe des aktiven Tabs */
    }

    .mud-tabs .mud-tab:hover {
        color: #295093 !important; /* Textfarbe des Tabs beim Hover */
        background-color: rgba(128, 128, 128, 0.2) /* Hintergrundfarbe des Tabs beim Hover */
    }

    .row {
        display: flex;
        flex-direction: row;
        align-items: center;
    }

    .mt-4 {
        margin-top: 1.5rem; /* 24px, kannst du je nach Bedarf anpassen */
    }
</style>

